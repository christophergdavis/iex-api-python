{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IEX-API-Python \u00b6 Summary \u00b6 The iex-api-python module is a wrapper for the IEX API , and is designed to closely map to the organization of the original API while adding functionality. A few examples of the additional functionality are: Many queries are returned as Pandas Dataframes . Built-in support for websockets connections. Option to format timestamps as datetime objects or ISO format. Installation \u00b6 Python >=3.6 pip install iex-api-python Getting Started \u00b6 From the API documenation : The IEX API is a set of services designed for developers and engineers. It can be used to build high-quality apps and services. We\u2019re always working to improve the IEX API. Please check back for enhancements and improvements. Read the terms . Read the manual and start building. Attribute properly . The API terms apply to the use of this module, as does the requirement to properly attribute the use of IEX data.","title":"Home"},{"location":"#iex-api-python","text":"","title":"IEX-API-Python"},{"location":"#summary","text":"The iex-api-python module is a wrapper for the IEX API , and is designed to closely map to the organization of the original API while adding functionality. A few examples of the additional functionality are: Many queries are returned as Pandas Dataframes . Built-in support for websockets connections. Option to format timestamps as datetime objects or ISO format.","title":"Summary"},{"location":"#installation","text":"Python >=3.6 pip install iex-api-python","title":"Installation"},{"location":"#getting-started","text":"From the API documenation : The IEX API is a set of services designed for developers and engineers. It can be used to build high-quality apps and services. We\u2019re always working to improve the IEX API. Please check back for enhancements and improvements. Read the terms . Read the manual and start building. Attribute properly . The API terms apply to the use of this module, as does the requirement to properly attribute the use of IEX data.","title":"Getting Started"},{"location":"batch/","text":"Batch \u00b6 The Batch class The batch object is used to request data on multiple stocks. It is designed to operate very similar to the stock object with nearly identical methods. The key difference is that the Batch object will return data as a Pandas Dataframe so that it is more convenient to work with.","title":"Batch"},{"location":"batch/#batch","text":"The Batch class The batch object is used to request data on multiple stocks. It is designed to operate very similar to the stock object with nearly identical methods. The key difference is that the Batch object will return data as a Pandas Dataframe so that it is more convenient to work with.","title":"Batch"},{"location":"getting_started/","text":"Getting Started \u00b6 Installation \u00b6 pip install iex-api-python","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#installation","text":"pip install iex-api-python","title":"Installation"},{"location":"iex_stats/","text":"IEX Stats \u00b6 iex_stats(date_format, output_format) Parameters date_format (default: timestamp) - Specifies how timestamps should be should be returned. Set to one of the following: timestamp - default; Does not alter IEX API output. datetime - Datetime object. isoformat - Converts to isoformat. output_format - The format to output. Options: dataframe (default) - Return result as a pandas dataframe. json - Return raw result converted from JSON to a python data structure. The iex_stats instance and class IexStats is the class used to instantiate the iex_stats object. Both can be imported from the iex module. The iex_stats object can be used to fetch IEX aggregate data. Creating a new iex_stats object \u00b6 from iex import IexStats iex_stats = IexStats () or from iex import iex_stats IEX Stats Methods \u00b6 intraday() \u00b6 IEX API - Intraday open_in_new from iex import IexStats IexStats ( date_format = 'datetime' ) . intraday () lastUpdated value marketShare 2018-05-17 18:32:07.535000+00:00 2.661000e-02 notional 2018-05-17 18:32:07.472000+00:00 5.214433e+09 routedVolume 2018-05-17 18:32:06.999000+00:00 2.245174e+07 symbolsTraded 2018-05-17 18:32:07.472000+00:00 5.299000e+03 volume 2018-05-17 18:32:07.472000+00:00 1.141716e+08 recent() \u00b6 IEX API - Recent open_in_new records() \u00b6 IEX API - Records open_in_new historical_summary() \u00b6 IEX API - Historical Summary open_in_new historical_daily() \u00b6 IEX API - Historical Daily open_in_new","title":"IEX Stats"},{"location":"iex_stats/#iex-stats","text":"iex_stats(date_format, output_format) Parameters date_format (default: timestamp) - Specifies how timestamps should be should be returned. Set to one of the following: timestamp - default; Does not alter IEX API output. datetime - Datetime object. isoformat - Converts to isoformat. output_format - The format to output. Options: dataframe (default) - Return result as a pandas dataframe. json - Return raw result converted from JSON to a python data structure. The iex_stats instance and class IexStats is the class used to instantiate the iex_stats object. Both can be imported from the iex module. The iex_stats object can be used to fetch IEX aggregate data.","title":"IEX Stats"},{"location":"iex_stats/#creating-a-new-iex_stats-object","text":"from iex import IexStats iex_stats = IexStats () or from iex import iex_stats","title":"Creating a new iex_stats object"},{"location":"iex_stats/#iex-stats-methods","text":"","title":"IEX Stats Methods"},{"location":"iex_stats/#intraday","text":"IEX API - Intraday open_in_new from iex import IexStats IexStats ( date_format = 'datetime' ) . intraday () lastUpdated value marketShare 2018-05-17 18:32:07.535000+00:00 2.661000e-02 notional 2018-05-17 18:32:07.472000+00:00 5.214433e+09 routedVolume 2018-05-17 18:32:06.999000+00:00 2.245174e+07 symbolsTraded 2018-05-17 18:32:07.472000+00:00 5.299000e+03 volume 2018-05-17 18:32:07.472000+00:00 1.141716e+08","title":"intraday()"},{"location":"iex_stats/#recent","text":"IEX API - Recent open_in_new","title":"recent()"},{"location":"iex_stats/#records","text":"IEX API - Records open_in_new","title":"records()"},{"location":"iex_stats/#historical_summary","text":"IEX API - Historical Summary open_in_new","title":"historical_summary()"},{"location":"iex_stats/#historical_daily","text":"IEX API - Historical Daily open_in_new","title":"historical_daily()"},{"location":"market/","text":"Market \u00b6 market(date_format, output_format) Parameters date_format (default: timestamp) - Specifies how timestamps should be should be returned. Set to one of the following: timestamp - default; Does not alter IEX API output. datetime - Datetime object. isoformat - Converts to isoformat. output_format - The format to output. Options: dataframe (default) - Return result as a pandas dataframe. json - Return raw result converted from JSON to a python data structure. market Certain API calls return market-wide data. For example, it might return data on stock prices for all stocks or a list of stocks based on a particular metric ( e.g. performance, gainers, losers). Market Methods: List items \u00b6 IEX API - List open_in_new mostactive() \u00b6 Example from iex import market market . mostactive () avgTotalVolume calculationPrice change changePercent close \\ 0 494020 sip 0.0500 0.00126 39.8000 1 124752351 sip -0.0052 -0.15249 0.0341 2 50816723 tops 0.4100 0.03293 12.4500 3 8446078 tops 3.0100 0.10057 29.9300 4 44161998 tops 2.2050 0.04083 54.0100 5 64003399 tops 0.6900 0.01485 46.4800 gainers() \u00b6 losers() \u00b6 iexvolume() \u00b6 iexpercent() \u00b6 Market Methods: Additional \u00b6 threshold_securities() \u00b6 IEX API - IEX Regulation SHO Threshold Securities open_in_new short_interest() \u00b6 IEX API - IEX Threshold Securities open_in_new news() \u00b6 IEX API - News open_in_new Parameters last (default: 10) - Number of stories to return between 1 and 50. ohlc() \u00b6 IEX API - News open_in_new previous() \u00b6 IEX API - News open_in_new Example from iex import market market . previous () symbol change changePercent close date high low \\ 0 A -6.71 -9.695 62.5 2018-05-15 64.1 60.7 1 AA -1.79 -3.421 50.54 2018-05-15 51.95 50.4 2 AABA -0.3 -0.391 76.44 2018-05-15 76.46 75.4 3 AAC 0.02 0.176 11.4 2018-05-15 11.52 11.19 4 AADR 0.52 0.888 59.08 2018-05-15 59.1785 58.02 5 AAL 0.73 1.719 43.19 2018-05-15 43.4 41.6 market() \u00b6 IEX API - News open_in_new Returns near real time traded volume on the markets.","title":"Markets"},{"location":"market/#market","text":"market(date_format, output_format) Parameters date_format (default: timestamp) - Specifies how timestamps should be should be returned. Set to one of the following: timestamp - default; Does not alter IEX API output. datetime - Datetime object. isoformat - Converts to isoformat. output_format - The format to output. Options: dataframe (default) - Return result as a pandas dataframe. json - Return raw result converted from JSON to a python data structure. market Certain API calls return market-wide data. For example, it might return data on stock prices for all stocks or a list of stocks based on a particular metric ( e.g. performance, gainers, losers).","title":"Market"},{"location":"market/#market-methods-list-items","text":"IEX API - List open_in_new","title":"Market Methods: List items"},{"location":"market/#mostactive","text":"Example from iex import market market . mostactive () avgTotalVolume calculationPrice change changePercent close \\ 0 494020 sip 0.0500 0.00126 39.8000 1 124752351 sip -0.0052 -0.15249 0.0341 2 50816723 tops 0.4100 0.03293 12.4500 3 8446078 tops 3.0100 0.10057 29.9300 4 44161998 tops 2.2050 0.04083 54.0100 5 64003399 tops 0.6900 0.01485 46.4800","title":"mostactive()"},{"location":"market/#gainers","text":"","title":"gainers()"},{"location":"market/#losers","text":"","title":"losers()"},{"location":"market/#iexvolume","text":"","title":"iexvolume()"},{"location":"market/#iexpercent","text":"","title":"iexpercent()"},{"location":"market/#market-methods-additional","text":"","title":"Market Methods: Additional"},{"location":"market/#threshold_securities","text":"IEX API - IEX Regulation SHO Threshold Securities open_in_new","title":"threshold_securities()"},{"location":"market/#short_interest","text":"IEX API - IEX Threshold Securities open_in_new","title":"short_interest()"},{"location":"market/#news","text":"IEX API - News open_in_new Parameters last (default: 10) - Number of stories to return between 1 and 50.","title":"news()"},{"location":"market/#ohlc","text":"IEX API - News open_in_new","title":"ohlc()"},{"location":"market/#previous","text":"IEX API - News open_in_new Example from iex import market market . previous () symbol change changePercent close date high low \\ 0 A -6.71 -9.695 62.5 2018-05-15 64.1 60.7 1 AA -1.79 -3.421 50.54 2018-05-15 51.95 50.4 2 AABA -0.3 -0.391 76.44 2018-05-15 76.46 75.4 3 AAC 0.02 0.176 11.4 2018-05-15 11.52 11.19 4 AADR 0.52 0.888 59.08 2018-05-15 59.1785 58.02 5 AAL 0.73 1.719 43.19 2018-05-15 43.4 41.6","title":"previous()"},{"location":"market/#market_1","text":"IEX API - News open_in_new Returns near real time traded volume on the markets.","title":"market()"},{"location":"reference_data/","text":"Reference \u00b6 ReferenceData(output_format) Parameters output_format - The format to output. Options: dataframe (default) - Return result as a pandas dataframe. json - Return raw result converted from JSON to a python data structure. The reference instance The reference object is designed to map closely to the Reference Data section of the IEX API. You can import either ReferenceData (the class) or reference from iex. The reference import is an instance of ReferenceData that can be used without having to instantiate a new object. Importing the reference object \u00b6 from iex import reference Setting the output format using the instance \u00b6 To update the output format, set the output_format attribute: reference . output_format = 'json' Reference Methods \u00b6 Below are the methods that can be invoked with a reference object. Beneath the listed method you will find a link that will take you to the corresponding IEX API documentation. symbols() \u00b6 IEX API - symbols from iex import reference reference . symbols () # Output symbol date iexId isEnabled \\ 0 A 2018-05-15 2 True 1 AA 2018-05-15 12042 True 2 AABA 2018-05-15 7653 True ... iex_corporate_actions() \u00b6 IEX API - IEX Corporate Actions Parameters date - Date specified as YYYYMMDD or a datetime object. iex_dividends() \u00b6 IEX API - IEX Dividends Parameters date - Date specified as YYYYMMDD or a datetime object. iex_next_day_ex_date() \u00b6 IEX API - IEX Next Day Ex Date Parameters date - Date specified as YYYYMMDD or a datetime object. iex_listed_symbol_directory() \u00b6 IEX API - IEX Listed Symbol Directory Parameters date - Date specified as YYYYMMDD or a datetime object.","title":"Reference Data"},{"location":"reference_data/#reference","text":"ReferenceData(output_format) Parameters output_format - The format to output. Options: dataframe (default) - Return result as a pandas dataframe. json - Return raw result converted from JSON to a python data structure. The reference instance The reference object is designed to map closely to the Reference Data section of the IEX API. You can import either ReferenceData (the class) or reference from iex. The reference import is an instance of ReferenceData that can be used without having to instantiate a new object.","title":"Reference"},{"location":"reference_data/#importing-the-reference-object","text":"from iex import reference","title":"Importing the reference object"},{"location":"reference_data/#setting-the-output-format-using-the-instance","text":"To update the output format, set the output_format attribute: reference . output_format = 'json'","title":"Setting the output format using the instance"},{"location":"reference_data/#reference-methods","text":"Below are the methods that can be invoked with a reference object. Beneath the listed method you will find a link that will take you to the corresponding IEX API documentation.","title":"Reference Methods"},{"location":"reference_data/#symbols","text":"IEX API - symbols from iex import reference reference . symbols () # Output symbol date iexId isEnabled \\ 0 A 2018-05-15 2 True 1 AA 2018-05-15 12042 True 2 AABA 2018-05-15 7653 True ...","title":"symbols()"},{"location":"reference_data/#iex_corporate_actions","text":"IEX API - IEX Corporate Actions Parameters date - Date specified as YYYYMMDD or a datetime object.","title":"iex_corporate_actions()"},{"location":"reference_data/#iex_dividends","text":"IEX API - IEX Dividends Parameters date - Date specified as YYYYMMDD or a datetime object.","title":"iex_dividends()"},{"location":"reference_data/#iex_next_day_ex_date","text":"IEX API - IEX Next Day Ex Date Parameters date - Date specified as YYYYMMDD or a datetime object.","title":"iex_next_day_ex_date()"},{"location":"reference_data/#iex_listed_symbol_directory","text":"IEX API - IEX Listed Symbol Directory Parameters date - Date specified as YYYYMMDD or a datetime object.","title":"iex_listed_symbol_directory()"},{"location":"stocks/","text":"Stock \u00b6 Stock(symbol, date_format) Parameters symbol - A Stock symbol date_format (default: timestamp) - Specifies how timestamps should be should be returned. Set to one of the following: timestamp - default; Does not alter IEX API output. datetime - Datetime object. isoformat - Converts to isoformat. The Stock class The Stock class is useful for returning information for a specific Stock, and is designed to map closely to the organization of the Stocks section of the IEX API. One major difference between the Stock class and the Stocks section of the IEX API is that the Stock object is not designed to handle batch requests or requests about the market. Batch requests are requests for data on multiple Stocks at the same time. Market requests return data for all Stocks or a set of Stocks based on the request ( e.g. gainers and losers). For batch requests, you should use the batch , and market requests should use the market object. Also note that the Stock object most often returns data as a python dictionary or list - closely mimicking the returned JSON of the IEX API. However, in some cases there are additional methods (suffixed with _table ) that will return a Pandas dataframe for convenience. Creating a new Stock object \u00b6 Provide a Stock symbol to create a Stock object. Stock symbols are case-insensitive. from iex import Stock tsla = Stock ( \"tsla\" ) Stock Methods \u00b6 Below are the methods that can be invoked with a Stock object. Beneath the listed method you will find a link that will take you to the corresponding IEX API documentation. book() \u00b6 /Stock/<symbol>/book from iex import Stock goog = Stock ( \"goog\" ) goog . book () # Output { 'quote': {...}, 'bids': [...], 'asks': [...], 'trades': [...], 'systemEvent': {...} } chart() \u00b6 IEX API - Chart open_in_new Parameters range (default: 1m) - Historical adjusted market-wide data or IEX-only data. See the IEX API reference for further details. 5y 2y 1y ytd 6m 3m 1m YYYYMMDD (date) dynamic chartReset (bool; default: None ) - 1d chart will reset at midnight instead of the default behavior of 9:30am ET. chartSimplify (bool; default: None ) - If True , runs a polyline simplification using the Douglas-Peucker algorithm. This is useful if plotting sparkline charts. chartInterval (bool: default: None ) - If passed, chart data will return every Nth element. chart_table() \u00b6 Returns a pandas dataframe from chart data. If range=dynamic , a range column is appended to the returned dataframe indicating whether the data is for 1d or 1m . See the See the IEX API documentation for further details. Parameters The same parameters are available as with chart() . Example from iex import Stock goog = Stock ( \"goog\" ) goog . chart_table ( range = '1d' ) # Output average changeOverTime close date high \\ 0 1094.852 0.000000 1095.535 20180511 1095.535 1 -1.000 NaN NaN 20180511 -1.000 2 -1.000 NaN NaN 20180511 -1.000 3 1093.145 -0.001559 1093.420 20180511 1093.630 ... company() \u00b6 IEX API - Company open_in_new delayed_quote() \u00b6 IEX API - Delayed Quote open_in_new dividends() \u00b6 IEX API - Dividends open_in_new parameters range (default: 1m) - Historical market data; range of data on dividends to return. dividends_table() \u00b6 Returns a dataframe of dividend() parameters range (default: 1m) - Historical market data; range of data on dividends to return. Example from iex import Stock F = Stock ( \"F\" ) f . dividends_table () # Output change changeOverTime changePercent close date \\ 0 0.098676 0.000000 0.887 11.2293 2018-04-16 1 0.000000 0.000000 0.000 11.2293 2018-04-17 2 -0.049338 -0.004390 -0.439 11.1800 2018-04-18 3 -0.220002 -0.023982 -1.968 10.9600 2018-04-19 4 -0.140000 -0.036449 -1.277 10.8200 2018-04-20 ... earnings() \u00b6 IEX API - Earnings open_in_new effective_spread() \u00b6 IEX API - Effective Spread open_in_new effective_spread_table() \u00b6 Returns a dataframe of effective_spread() financials() \u00b6 financials_table() \u00b6 ohlc() \u00b6 IEX API - OHLC open_in_new Info If you are trying to return the official open/close for all Stocks use market.ohlc() . price() \u00b6 peers() \u00b6 Returns a list of peer (competitor/related) companies. By default, the returned list is a set of Stock objects. You can return a list of companies as strings by setting as_string=True . Parameters as_string (Default: False ) - If set to True , return the list of peers as strings rather than Stock objects. Example from iex import Stock tsla = Stock ( \"tsla\" ) tsla . peers () # Output [ & lt ; Stock : HMC & gt ;, & lt ; Stock : TM & gt ;, & lt ; Stock : F & gt ;, & lt ; Stock : GM & gt ; ] previous() \u00b6 IEX API - Previous open_in_new Returns the previous day adjusted Stock price. The IEX API can also return the previous day prices for the entire market. For this query, use market.previous() . Info If you are trying to return the previous days market data, use market.previous() . price() \u00b6 IEX API - Price open_in_new Returns the Stock price. Example tsla = Stock ( \"TSLA\" ) tsla . price () 284.18 quote() \u00b6 stats() \u00b6","title":"Stock"},{"location":"stocks/#stock","text":"Stock(symbol, date_format) Parameters symbol - A Stock symbol date_format (default: timestamp) - Specifies how timestamps should be should be returned. Set to one of the following: timestamp - default; Does not alter IEX API output. datetime - Datetime object. isoformat - Converts to isoformat. The Stock class The Stock class is useful for returning information for a specific Stock, and is designed to map closely to the organization of the Stocks section of the IEX API. One major difference between the Stock class and the Stocks section of the IEX API is that the Stock object is not designed to handle batch requests or requests about the market. Batch requests are requests for data on multiple Stocks at the same time. Market requests return data for all Stocks or a set of Stocks based on the request ( e.g. gainers and losers). For batch requests, you should use the batch , and market requests should use the market object. Also note that the Stock object most often returns data as a python dictionary or list - closely mimicking the returned JSON of the IEX API. However, in some cases there are additional methods (suffixed with _table ) that will return a Pandas dataframe for convenience.","title":"Stock"},{"location":"stocks/#creating-a-new-stock-object","text":"Provide a Stock symbol to create a Stock object. Stock symbols are case-insensitive. from iex import Stock tsla = Stock ( \"tsla\" )","title":"Creating a new Stock object"},{"location":"stocks/#stock-methods","text":"Below are the methods that can be invoked with a Stock object. Beneath the listed method you will find a link that will take you to the corresponding IEX API documentation.","title":"Stock Methods"},{"location":"stocks/#book","text":"/Stock/<symbol>/book from iex import Stock goog = Stock ( \"goog\" ) goog . book () # Output { 'quote': {...}, 'bids': [...], 'asks': [...], 'trades': [...], 'systemEvent': {...} }","title":"book()"},{"location":"stocks/#chart","text":"IEX API - Chart open_in_new Parameters range (default: 1m) - Historical adjusted market-wide data or IEX-only data. See the IEX API reference for further details. 5y 2y 1y ytd 6m 3m 1m YYYYMMDD (date) dynamic chartReset (bool; default: None ) - 1d chart will reset at midnight instead of the default behavior of 9:30am ET. chartSimplify (bool; default: None ) - If True , runs a polyline simplification using the Douglas-Peucker algorithm. This is useful if plotting sparkline charts. chartInterval (bool: default: None ) - If passed, chart data will return every Nth element.","title":"chart()"},{"location":"stocks/#chart_table","text":"Returns a pandas dataframe from chart data. If range=dynamic , a range column is appended to the returned dataframe indicating whether the data is for 1d or 1m . See the See the IEX API documentation for further details. Parameters The same parameters are available as with chart() . Example from iex import Stock goog = Stock ( \"goog\" ) goog . chart_table ( range = '1d' ) # Output average changeOverTime close date high \\ 0 1094.852 0.000000 1095.535 20180511 1095.535 1 -1.000 NaN NaN 20180511 -1.000 2 -1.000 NaN NaN 20180511 -1.000 3 1093.145 -0.001559 1093.420 20180511 1093.630 ...","title":"chart_table()"},{"location":"stocks/#company","text":"IEX API - Company open_in_new","title":"company()"},{"location":"stocks/#delayed_quote","text":"IEX API - Delayed Quote open_in_new","title":"delayed_quote()"},{"location":"stocks/#dividends","text":"IEX API - Dividends open_in_new parameters range (default: 1m) - Historical market data; range of data on dividends to return.","title":"dividends()"},{"location":"stocks/#dividends_table","text":"Returns a dataframe of dividend() parameters range (default: 1m) - Historical market data; range of data on dividends to return. Example from iex import Stock F = Stock ( \"F\" ) f . dividends_table () # Output change changeOverTime changePercent close date \\ 0 0.098676 0.000000 0.887 11.2293 2018-04-16 1 0.000000 0.000000 0.000 11.2293 2018-04-17 2 -0.049338 -0.004390 -0.439 11.1800 2018-04-18 3 -0.220002 -0.023982 -1.968 10.9600 2018-04-19 4 -0.140000 -0.036449 -1.277 10.8200 2018-04-20 ...","title":"dividends_table()"},{"location":"stocks/#earnings","text":"IEX API - Earnings open_in_new","title":"earnings()"},{"location":"stocks/#effective_spread","text":"IEX API - Effective Spread open_in_new","title":"effective_spread()"},{"location":"stocks/#effective_spread_table","text":"Returns a dataframe of effective_spread()","title":"effective_spread_table()"},{"location":"stocks/#financials","text":"","title":"financials()"},{"location":"stocks/#financials_table","text":"","title":"financials_table()"},{"location":"stocks/#ohlc","text":"IEX API - OHLC open_in_new Info If you are trying to return the official open/close for all Stocks use market.ohlc() .","title":"ohlc()"},{"location":"stocks/#price","text":"","title":"price()"},{"location":"stocks/#peers","text":"Returns a list of peer (competitor/related) companies. By default, the returned list is a set of Stock objects. You can return a list of companies as strings by setting as_string=True . Parameters as_string (Default: False ) - If set to True , return the list of peers as strings rather than Stock objects. Example from iex import Stock tsla = Stock ( \"tsla\" ) tsla . peers () # Output [ & lt ; Stock : HMC & gt ;, & lt ; Stock : TM & gt ;, & lt ; Stock : F & gt ;, & lt ; Stock : GM & gt ; ]","title":"peers()"},{"location":"stocks/#previous","text":"IEX API - Previous open_in_new Returns the previous day adjusted Stock price. The IEX API can also return the previous day prices for the entire market. For this query, use market.previous() . Info If you are trying to return the previous days market data, use market.previous() .","title":"previous()"},{"location":"stocks/#price_1","text":"IEX API - Price open_in_new Returns the Stock price. Example tsla = Stock ( \"TSLA\" ) tsla . price () 284.18","title":"price()"},{"location":"stocks/#quote","text":"","title":"quote()"},{"location":"stocks/#stats","text":"","title":"stats()"}]}